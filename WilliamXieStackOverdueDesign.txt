StackOverdue Design

For this library project, I will leverage heavily "std::unordered_map (hash table)" and "std::multimap (red-black tree)".
Database (Library):
main tables storing books and accounts:
    - std::unordered_map (hash table) will be used to store books with book IDs as keys
    - std::unordered_map (hash table) will be used to store accounts with account IDs as keys

ordered containers of book and account IDs:
    - std::set (red-black tree) will be used to store ordered book IDs
    - std::set (red-black tree) will be used to store ordered account IDs

non-clustered database indices will be built for different fields for books and accounts: contain copies of data sorted by title, author, name, etc
    - std::multimap (red-black tree) will be used to build indices for title, author, genre, and popularity for books.
    - std::multimap (red-black tree) will be used to build indices for username and number_of_checkouts.

In my Library database I will implement my main tables, which will store books and accounts, as std::unordered_map hash tables.
The books and accounts tables will use their respective unique IDs as keys. 
Using std:unordered_map to store books and accounts will allow for on average O(1) searches, insertions, and deletions.

In order to obtain sorted orders of books and accounts I will use non-clustered database indices.
Multiple indices will be used to sort by each of the books' and accounts' qualifiers (title/author/genre/popularity, name/checkouts).
The indices will be non-clustered in that the order of the main data (books and accounts hash tables) will not be affected by index operations.
Each index is a list of records sorted by the qualifier as non-unique key, with either book ID or account ID as the value, thus retaining the mapping to the main databases of books and accounts. Each index is implemented with std::multimap (which itself will implement a red-black tree).
Using std::multimap for each index allows for an improved lookup performance with on average O(log(n)) searches, insertions, and deletions.
Instead of std::map, std::multimap was chosen because it could store non-unique key values.

At the cost of space, database indices will allow for high performance maintenance and lookup for books and accounts via std::multimap.
In conjunction with the main hash tables for books and accounts data, users will be able to quickly browse, search, and checkout/return books.
Account and book IDs are stored in sorted order in std::set because it maintains a sorted container of unique key values.
Accounts will contain books in vectors for convenient iteration and operations on any one particular book checked out/in the account's book history.

9 classes for this project:
classes: Book, Account, BookFileReader, AccountFileReader, BookManger, AcctManager, Time, Library, Administrator.

enum BooksOrderType { TITLE, AUTHOR, GENRE, BOOKID, POPULARITY };
class Book {
private:
    int iBookID;
    string sTitle;
    string sAuthor;
    string sGenre;
    int iPopScore;

    int iDueDate;
    int iRenewals;
    bool bIsCheckedOut;
    int iAcctID;
public:
    Book(int bookId, string title, string author, string genre, int popScore) {
        iBookID=bookId;
        sTitle=title;
        sAuthor=author;
        sGenre=genre;
        iPopScore=popScore;

        bIsCheckedOut=false;
        iRenewals=0;
    }

    int getBookID () { return iBookID;}
    string getTitle () { return sTitle;}
    string getAuthor () { return sAuthor;}
    string getGenre () { return sGenre;}

    int getPopScore () { return iPopScore;}
    void setPopScore (int score) { iPopScore=score;}

    int getDueDate () { return iDueDate;}
    int getRenewals (){ return iRenewals;}
    bool getIsCheckedOut () { return bIsCheckedOut;}
    int getAcctID () { return iAcctID;}

    void setDueDate (int dueDate) {iDueDate = dueDate;}
    void setRenewals (int renewal) {iRenewals=renewal;}
    void setIsCheckedOut (bool checkedOut) {bIsCheckedOut=checkedOut;}
    void setAcctID (int acctID) {iAcctID = acctID;}
};

enum AccountsOrderType { NAME, ACCOUNTID, CHECKOUTS };
class Account {
private:
    int iAcctID;
    string sUserName;
    int iNumCheckedOut;

    int iOverdue;
    set<int> *psetCheckedOutBooks;
    set<int> *psetCheckedOutBooksHistory;
public:
    Account(int acctID, string userName, int num) {
        iAcctID=acctID;
        sUserName=userName;
        iNumCheckedOut=num;

        iOverdue=0;
        psetCheckedOutBooks= NULL;
        psetCheckedOutBooksHistory= NULL;
    }

    int getAccountID () { return iAcctID;}
    string getUserName () {return sUserName;}
    int getNumCheckedOut () { return iNumCheckedOut;}
    void setNumCheckedOut (int num) { iNumCheckedOut=num;}

    int getOverdue () {return iOverdue;}
    void setOverdue (int overdue) {iOverdue=overdue;}

    set<int>* getCheckedOutBooks() { return psetCheckedOutBooks;}
    set<int>* getCheckedOutBooksHistory() { return psetCheckedOutBooksHistory;}
    void setCheckedOutBooks(set<int>* pCheckedOut) {psetCheckedOutBooks=pCheckedOut;}
    void setCheckedOutBooksHistory(set<int>* pHistory) {psetCheckedOutBooksHistory=pHistory;}
};

//Reads books file and passes data to data structures contained in Library.
class BookFileReader {
public:
    bool readBookFile(unordered_map<int, Book*> &pumapBook, string sBookFileName);
    int printBookFile(unordered_map<int, Book*> &umapBook);
};

//Reads accounts file and passes data to data structures contained in Library.
class AccountFileReader {
public:
public:
    bool readAccountFile(unordered_map<int, Account*> &umapAccount, string sAcctFileName, BookManager* pBookMgr);
    int printAccountFile(unordered_map<int, Account*> &umapAccount, BookManager* pBookMgr);
};

class BookManager {
private:
    unordered_map<int, Book*> umapBook;
    set<int> setBookID;
    multimap<string,int> mmapOfTitle;
    multimap<string,int> mmapOfAuthor;
    multimap<string,int> mmapOfGenre;
    multimap<int,int> mmapOfPopScore;
public:
    unordered_map<int,Book*> getUmapBook () { return umapBook;}
    bool loadBooks(string sBookFileName);
    void createBookIndices();
    bool isBookMgrEmpty();
    bool isBookExisted(string title,string author);

    void browseBooksByTitle();
    void browseBooksByAuthor();
    void browseBooksByGenre();
    void browseBooksByBookid();
    void browseBooksByPopularity();

    Book* getABook(int iBookID);
    int getTotalNumBooks();
    int getTotalNumBooksOverdue();

    void DeleteEntryInmmapOfTitle (string title,int bookID);
    void DeleteEntryInmmapOfAuthor (string author,int bookID);
    void DeleteEntryInmmapOfGenre (string genre,int bookID);
    void DeleteEntryInmmapOfPopScore (int popscore,int bookID);
    void UpdatemmapOfPopScore (int bookID, int oldPopScore, int newPopScore);

    void searchAllBooks();
    void searchBooksByTitle(string searchWord);
    void searchBooksByAuthor(string searchWord);

    bool addABook(string title,string author,string genre);
    bool removeABook(int bookID);
}

class AccountManager {
private:
    unordered_map<int, Account*> umapAccount;
    set<int> setAcctID;
    multimap<string,int> mmapOfAcctName;
    multimap<int,int> mmapOfCheckout;

    BookManager* pBookMgr;
public:
    AccountManager(BookManager* bookManager) {
        pBookMgr=bookManager;
    }

    unordered_map<int,Account*> getUmapAccount() {return umapAccount;}
    bool loadAccounts(string sAcctFileName);
    void createAcctIndices();
    bool isAcctMgrEmpty();

    void browseAccountsByName();
    void browseAccountsByAccountid();
    void browseAccountsByCheckouts();

    Account* getAnAccount(int iAcctID);
    int getTotalNumAccounts();
    int getTotalNumAccountsOverdue();
    int updateOverdue(int acctID);

    void DeleteEntryInmmapOfCheckout (int oldCheckoutVal,int acctID);
    void DeleteEntryInmmapOfAcctName (string userName,int acctID);
    void UpdatemmapOfCheckout (int acctID, int oldCheckoutVal, int newCheckoutVal);

    bool addAnAcct(string userName);
    bool removeAnAcct(int acctID);
}

class Time {
public:
    static unsigned int uiTime;
    static unsigned int getTime() {return uiTime;}
    static void timeTravel(unsigned int uiTravel) {uiTime += uiTravel;}
}


class Library {
    Contains database of books and accounts and their associated data indices.
    Also contains methods that execute user commands.
private:
    string sBookFileName;
    string sAccountFileName;
    BookManager* bookMgr;
    AccountManager* acctMgr;

public:
    void initializeLibrary(string bookFileName, string accountFileName);
    BookManager* getBookMgr() { return bookMgr;}
    AccountManager* getAcctMgr () { return acctMgr;}

    bool browseBooks (BooksOrderType sortOrderType);
    bool printABook (int bookID);
    bool searchBooks(BooksOrderType searchType,string searchWord);

    bool browseAccounts(AccountsOrderType sortOrderType);
    bool printAnAccount(int accountID);
    bool CheckoutABook(int accountID, int bookID);
    bool renewBooks(int accountID);
    bool returnABook(int bookID);

    bool recommendBooks(int accountID);

    bool addABook(string title,string author,string genre);
    bool removeABook(int bookID);
    bool addAnAcct(string userName);
    bool removeAnAcct(int acctID);
    bool systemInfo();
    void timeTravel (unsigned int uiTravel);
    bool exportToBookfile(string bookFilename);
    bool exportToAcctfile(string acctFilename);
    void exportToFiles(string bookFilename,string acctFilename);

    void displayHelpMsg ();
    void displayExitMsg ();
};

enum CommandType { BROWSE, BOOK, SEARCH, ACCOUNTS, ACCOUNT, CHECKOUT, RENEW, RETURN, RECOMMEND, ADDB, REMOVEB, ADDA, REMOVEA, SYSTEM, TIME, EXPORT, HELP, EXIT };

//Interfaces between Library and command line to execute inputted commands and display generated output.
class Administrator {
private:
    Library myLibrary;
public:
    //Contains wrapper methods for all operations in Library class to generate output messages.

    Administrator(string bookFileName, string accountFileName) {
        myLibrary.initializeLibrary(bookFileName,accountFileName);
    }

    void stringToUpper(string &s);
    bool intepretCommand (string &command, CommandType &cmdType);
    int runCommands ();

    bool parseBrowse(BooksOrderType &sortOrderType);
    bool parseBook(int &bookID);
    bool parseSearch(BooksOrderType &searchType, string &searchWord);

    bool parseAccounts(AccountsOrderType &sortOrderType);
    bool parseAccount(int &accountID);
    bool parseCheckout(int &accountID, int &bookID);
    bool parseRenew(int &accountID);
    bool parseReturn(int &bookID);

    bool parseRecommend(int &acctID);

    bool parseAddb(string &title, string &author, string &genre);
    bool parseRemoveb(int &bookID);
    bool parseAdda(string &userName);
    bool parseRemovea(int &acctID);

    bool parseSystem();
    bool parseTime(unsigned int &uiTravel);
    bool parseExport(string &bookFilename, string &acctFilename);
};


The StackOverdueSimulator.cpp file only has the main function.

Instructions to compile:
1. Put all files in a given folder, say "William.Xie37@cslab13 StackOverdue".
2. type "make all" to compile the program.  It takes about 35 seconds to compile and link.


Instructions to run the program:
1. copy the data files to the same folder, say "William.Xie37@cslab13 StackOverdue".
2. type "./StackOverdue books.data accounts.data" to run the program.
3. you can also run it by typing "./StackOverdue books.data" or "./StackOverdue".

